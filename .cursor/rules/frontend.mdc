---
description: 这是一个基于 React + TypeScript 的前端项目规范指南。它定义了项目的目录结构、数据流动模式、组件设计、状态管理、API 调用等标准。采用清晰的分层架构（Pages-Components-Hooks-Services）和单向数据流模式，确保代码的可维护性和可测试性。
globs: *.tsx,*.ts
alwaysApply: false
---

# React Frontend Project Structure Rules

## Directory Structure
```
frontend/
├── src/
│   ├── assets/        # 静态资源文件
│   ├── components/    # 可复用组件
│   │   ├── ui/        # 基础UI组件
│   │   └── common/    # 业务通用组件
│   ├── hooks/         # 自定义 Hooks
│   ├── config/        # 配置文件
│   ├── layouts/       # 布局组件
│   ├── routes/        # 路由配置
│   ├── services/      # API 服务层
│   │   ├── api/       # API 接口定义
│   │   ├── http/      # HTTP 客户端配置
│   │   └── types/     # 接口类型定义
│   ├── stores/        # 状态管理 (Zustand)
│   ├── types/         # 全局类型定义
│   ├── utils/         # 工具函数
│   └── pages/         # 页面组件
└── tests/             # 测试文件
```

## 数据流动模式

### 1. 单向数据流
```
Page (页面) -> Store (状态) -> Service (服务) -> API (后端)
↑                                                   |
└───────────────────────────────────────────────────┘
```

- Pages: 页面组件，负责路由级别的组件和数据聚合
- Components: 可复用组件，接收 props 并触发事件
- Hooks: 业务逻辑封装，状态管理和副作用处理
- Services: API 封装，处理数据请求和响应

### 2. 组件通信
- Props Down: 父组件通过 props 向子组件传递数据
- Events Up: 子组件通过回调函数向父组件发送事件
- Global State: 使用 Zustand 进行全局状态管理

## 代码规范

### 1. 组件设计
```tsx
// 函数组件 + TypeScript
interface TodoListProps {
  items: Todo[]
  onToggle: (id: string) => void
}

const TodoList: React.FC<TodoListProps> = ({ items, onToggle }) => {
  return (
    <ul>
      {items.map(item => (
        <TodoItem
          key={item.id}
          todo={item}
          onToggle={() => onToggle(item.id)}
        />
      ))}
    </ul>
  )
}

// 导出组件
export default TodoList
```

### 2. 状态管理
```typescript
// stores/todoStore.ts
import create from 'zustand'

interface TodoState {
  todos: Todo[]
  loading: boolean
  error: Error | null
  
  // actions
  fetchTodos: () => Promise<void>
  addTodo: (todo: CreateTodoRequest) => Promise<void>
  toggleTodo: (id: string) => Promise<void>
}

export const useTodoStore = create<TodoState>((set, get) => ({
  todos: [],
  loading: false,
  error: null,

  fetchTodos: async () => {
    set({ loading: true })
    try {
      const response = await todoService.list()
      set({ todos: response.data })
    } catch (error) {
      set({ error: error as Error })
    } finally {
      set({ loading: false })
    }
  }
}))
```

### 3. 自定义 Hooks
```typescript
// hooks/useTodos.ts
export function useTodos() {
  // 从 store 中选择状态
  const todos = useTodoStore(state => state.todos)
  const loading = useTodoStore(state => state.loading)
  const error = useTodoStore(state => state.error)
  const fetchTodos = useTodoStore(state => state.fetchTodos)

  // 派生状态
  const completedTodos = useMemo(() => 
    todos.filter(todo => todo.completed),
    [todos]
  )

  // 副作用处理
  useEffect(() => {
    fetchTodos()
  }, [fetchTodos])

  return {
    todos,
    loading,
    error,
    completedTodos
  }
}
```

### 4. API 服务
```typescript
// services/api/todo.ts
import { http } from '../http'

export const todoService = {
  list: () => 
    http.post<TodoResponse>('/todos/list'),
  
  create: (data: CreateTodoRequest) => 
    http.post<Todo>('/todos/create', data),
  
  update: (id: string, data: UpdateTodoRequest) =>
    http.post<Todo>(`/todos/update/${id}`, data)
}
```

### 5. 路由配置
```typescript
// routes/index.tsx
import { createBrowserRouter } from 'react-router-dom'

export const router = createBrowserRouter([
  {
    path: '/',
    element: <RootLayout />,
    children: [
      {
        path: 'todos',
        element: <TodoList />,
        loader: async () => {
          const store = useTodoStore.getState()
          await store.fetchTodos()
          return null
        }
      }
    ]
  }
])
```

## 页面组件模式

```tsx
// pages/TodoList.tsx
const TodoListPage: React.FC = () => {
  // 1. 使用自定义 Hook
  const { todos, loading, error } = useTodos()
  
  // 2. 本地状态
  const [newTodo, setNewTodo] = useState('')
  
  // 3. 事件处理
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!newTodo.trim()) return
    
    try {
      await todoService.create({ title: newTodo })
      setNewTodo('')
    } catch (err) {
      console.error(err)
    }
  }
  
  // 4. 条件渲染
  if (loading) return <LoadingSpinner />
  if (error) return <ErrorMessage error={error} />
  
  return (
    <div>
      <h1>待办事项</h1>
      
      <form onSubmit={handleSubmit}>
        <input
          value={newTodo}
          onChange={e => setNewTodo(e.target.value)}
          placeholder="添加新待办..."
        />
        <button type="submit">添加</button>
      </form>
      
      <TodoList items={todos} />
    </div>
  )
}
```

## 组件设计原则

1. **组件分类**：
   - UI 组件：纯展示，无业务逻辑
   - 容器组件：包含业务逻辑和状态
   - 页面组件：路由级别，负责数据聚合

2. **状态管理原则**：
   - 本地状态用 useState
   - 共享状态用 Zustand
   - 服务端状态用 React Query

3. **性能优化**：
   - 使用 useMemo 缓存计算结果
   - 使用 useCallback 缓存函数
   - 使用 React.memo 避免不必要的重渲染

4. **错误处理**：
   - 使用 Error Boundary 捕获渲染错误
   - 统一的错误提示组件
   - API 错误统一处理

## 测试策略

1. **单元测试**：
   - 组件测试：@testing-library/react
   - Hook 测试：@testing-library/react-hooks
   - 状态测试：直接测试 store

2. **集成测试**：
   - 页面交互测试
   - API 调用测试
   - 路由测试

3. **E2E测试**：
   - 使用 Cypress 进行端到端测试
   - 覆盖关键业务流程 